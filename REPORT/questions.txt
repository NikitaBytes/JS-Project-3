*** КОНТРОЛЬНЫЕ ВОПРОСЫ ***

*** Каким образом можно получить доступ к элементу на веб-странице 
с помощью JavaScript? ***
Для доступа к элементам на веб-странице с помощью JavaScript есть несколько 
основных методов, которые позволяют выбирать элементы по идентификатору, 
классу, тегу, атрибуту или более сложным CSS-селекторам. 
Основные из их:
1.getElementById:
Используется для получения элемента по его атрибуту id.
Возвращает один элемент или null, если элемент с таким идентификатором отсутствует.
var element = document.getElementById('myElementId');
2.getElementsByClassName:
Возвращает живую коллекцию всех элементов, которые имеют указанный класс.
Можно итерировать через коллекцию, как через массив.
var elements = document.getElementsByClassName('myClass');
3.getElementsByTagName:
Возвращает живую коллекцию всех элементов заданного тега.
Похож на getElementsByClassName в том, что возвращает коллекцию.
var elements = document.getElementsByTagName('div');
4.querySelector:
Возвращает первый элемент, соответствующий указанному CSS-селектору.
Если элементов не найдено, возвращает null.
var element = document.querySelector('.myClass');
5.querySelectorAll:
Возвращает статическую (не живую) коллекцию всех элементов, которые соответствуют CSS-селектору.
Можно итерировать через коллекцию с помощью циклов или методов массива.
var elements = document.querySelectorAll('p.myClass');

Эти методы позволяют выбирать элементы DOM на основе их идентификатора, 
класса, тега или любых других атрибутов.


*** Что такое делегирование событий и как оно используется для 
эффективного управления событиями на элементах DOM? ***
Делегирование событий — это техника управления событиями в JavaScript, которая 
используется для уменьшения количества обработчиков событий на странице и для 
обработки событий на элементах, которые могут быть добавлены в DOM в будущем. 
Эта техника основана на механизме всплытия событий в DOM. Вместо того чтобы 
назначать обработчик события каждому интересующему элементу, обработчик добавляется 
к одному родительскому элементу. Этот обработчик будет анализировать события, 
всплывающие от дочерних элементов.
Преимущества делегирования событий:
Меньше обработчиков: Экономия ресурсов, так как обработчики событий привязаны к 
меньшему количеству элементов.
Легкость управления динамическим контентом: Нет необходимости повторно назначать 
обработчики для новых элементов.
Упрощение управления событиями в сложных приложениях: Облегчает отслеживание и 
управление событиями в приложениях с большим количеством интерактивных компонентов.

Делегирование событий особенно полезно в современных веб-приложениях, где элементы 
часто добавляются и удаляются из DOM, а также в ситуациях, когда обработчики должны 
быть эффективно управляемы и масштабируемы.

*** Как можно изменить содержимое элемента DOM с помощью 
JavaScript после его выборки? ***
Чтобы изменить содержимое элемента DOM в JavaScript после его выборки, 
можно использовать несколько методов. Например, если у вас уже есть ссылка 
на DOM-элемент, вы можете изменить его содержимое или атрибуты. Самые 
распространённые способы:

1. **`innerHTML`** – позволяет получить или задать HTML-содержимое элемента 
как строку. Это удобно, если вы хотите вставить новый HTML-код внутрь элемента:
   ```
   const element = document.getElementById('myElement');
   element.innerHTML = '<p>Новое содержимое</p>';
   ```

2. **`textContent`** – используется для изменения текстового содержимого элемента, 
без включения HTML-тегов. Это безопаснее `innerHTML`, так как предотвращает 
случайное выполнение вредоносного кода:
   ```
   const element = document.getElementById('myElement');
   element.textContent = 'Текстовое содержимое';
   ```

3. **Изменение атрибутов** – можно изменять атрибуты элемента с помощью 
методов `setAttribute` и `getAttribute`. Например, изменение значения 
атрибута `class`:
   ```
   const element = document.getElementById('myElement');
   element.setAttribute('class', 'new-class');
   ```

4. **`style`** – для изменения стилей элемента можно использовать свойство `style`:
   ```
   const element = document.getElementById('myElement');
   element.style.color = 'red';
   element.style.fontSize = '20px';
   ```

Эти методы позволяют эффективно управлять элементами на вашей веб-странице, 
изменяя их содержимое и внешний вид в зависимости от потребностей вашего приложения.

*** Как можно добавить новый элемент в DOM дерево с 
помощью JavaScript? ***
Чтобы добавить новый элемент в DOM-дерево с помощью JavaScript, нужно:

1. **Создание нового элемента**: Сначала необходимо создать новый элемент,
используя метод `document.createElement()`. В качестве аргумента передается 
тег создаваемого элемента, например `'div'`, `'p'`, `'span'` и так далее.

   ```
   var newElement = document.createElement('div');
   ```

2. **Настройка элемента**: После создания элемента вы можете добавить к нему 
текст, классы, атрибуты или стили. Для добавления текста используйте 
`textContent` или `innerText`.

   ```
   newElement.textContent = 'Привет, мир!';
   ```

   Для добавления класса или атрибутов используйте `className` или 
   `setAttribute()`.

   ```
   newElement.className = 'my-class';
   newElement.setAttribute('id', 'my-div');
   ```

3. **Добавление элемента в DOM-дерево**: Выберите родительский элемент, к 
которому хотите добавить новый элемент, и используйте метод `appendChild()` 
или `insertBefore()`. Если вы используете `appendChild()`, элемент будет 
добавлен в конец списка дочерних элементов выбранного родителя.

   ```
   document.body.appendChild(newElement);
   ```

   Если вы хотите вставить элемент в определенное место, используйте `insertBefore()`. 
   Этот метод требует два аргумента: новый элемент и элемент, перед которым 
   будет произведена вставка.
   ```
   var referenceElement = document.getElementById('someElement');
   document.body.insertBefore(newElement, referenceElement);
   ```

Это базовые шаги для добавления элементов в DOM-дерево с помощью JavaScript. 
Можно использовать и другие методы, например `insertAdjacentHTML()` 
или `replaceChild()`, в зависимости от потребностей.